<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wsh.asset.mapper.DepartmentMapper">

    <select id="listDepartment" parameterType="com.wsh.asset.comms.DepartmentParams" resultType="Map">
    SELECT
        d1.department_id as departmentId,
        d1.department_name as departmentName,
        d1.department_parentid as departmentParentid,
          d2.department_name as parentDepartmentName,
        d1.department_discribe as departmentDiscribe,
        d1.department_remark as departmentRemark
    FROM
    department d1
        LEFT JOIN department d2 ON d1.department_parentid=d2.department_id
    <include refid="Base_where_List"/>
    </select>

    <select id="listDepartmentParentId" resultType="map">
    SELECT
        department_id as departmentId,
        department_parentid as departmentParentid
    FROM
        department
    </select>

    <select id="listDepartmentAsset" parameterType="com.wsh.asset.comms.DepartmentParams" resultType="Map">
        SELECT
        a1.asset_id as assetId,
        a1.asset_number as assetNumber,
        a1.asset_name as assetName,
        a1.asset_classifyid as assetClassifyid,
          a2.assetclassify_name as assetClassifyName,
        a1.asset_storagedate as assetStoragedate,
        a1.asset_sourceid as assetSourceid,
          a3.assetsource_name as assetSourceName,
        a1.asset_channel as assetChannel,
        a1.asset_purchaseid as assetPurchaseid,
        a1.asset_contractid as assetContractid,
        a1.asset_brand as assetBrand,
        a1.asset_price as assetPrice,
        a1.asset_user_id as assetUserid,
        a1.asset_departmentid as assetDepartmentid,
          d1.department_name as assetDepartmentName,
        a1.asset_storageplace as assetStorageplace,
        a1.asset_enabledate as assetEnabledate,
        a1.asset_usedirectionid as assetUsedirectionid,
          a4.assetusedirection_name as assetUseDirectionName,
        a1.asset_SNnumber as assetSNnumber,
        a1.asset_manufactor as assetManufactor,
        a1.asset_productiondate as assetProductiondate,
        a1.asset_warrantydeadline as assetWarrantydeadline,
        a1.asset_maintenanceprice as assetMaintenanceprice,
        a1.asset_usestatus as assetUsestatus,
        asset_remark as assetRemark
        FROM `asset` a1
        LEFT JOIN assetclassify a2 ON a1.asset_classifyid=a2.assetclassify_id
        LEFT JOIN assetsource a3 ON a1.asset_sourceid=a3.assetsource_id
        LEFT JOIN assetusedirection a4 ON a1.asset_usedirectionid=a4.assetusedirection_id
        LEFT JOIN department d1 ON a1.asset_departmentid=d1.department_id
        <include refid="Base_where_List"/>
    </select>

    <insert id="addDepartment" parameterType="com.wsh.asset.comms.DepartmentParams">
      INSERT INTO
        department
        (department_name,
        department_parentid,
        department_discribe,
        department_remark)
      VALUES
        (#{departmentName},
        #{departmentParentid},
        #{departmentDiscribe},
        #{departmentRemark})
    </insert>

    <update id="updateDepartment" parameterType="com.wsh.asset.comms.DepartmentParams">
      UPDATE department
        <set>
            <if test="departmentName != null">department_name=#{departmentName},</if>
            <if test="departmentParentid != null">department_parentid=#{departmentParentid},</if>
            <if test="departmentDiscribe != null">department_discribe=#{departmentDiscribe},</if>
            <if test="departmentRemark != null">department_remark=#{departmentRemark}</if>
        </set>
      WHERE
        <if test="departmentId != null and departmentId.length > 0">
            department_id IN
            <foreach collection="departmentId" item = "item" index = "index"
                     open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </update>

    <delete id="deleteDepartment">
      DELETE FROM
        department
      WHERE
        <if test="departmentId !=null and departmentId.length > 0">
            department_id IN
            <foreach collection="departmentId" item="item" index="index"
                     open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </delete>

    <!-- 动态基本信息查询条件 -->
    <sql id="Base_where_List">
        <!-- id查询数组：： -->
        <if test="departmentId !=null and departmentId.length > 0">
            AND d1.department_id IN
            <foreach collection="departmentId" item="item" index="index"
                     open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>

        <!-- 部门分类name -->
        <if test="departmentName != null">
            AND d1.department_name = #{departmentName,jdbcType=VARCHAR}
        </if>

        <!-- 部门父类id -->
        <if test="departmentParentid != null">
            AND d1.department_parentid = #{departmentParentid,jdbcType=VARCHAR}
        </if>
    </sql>

</mapper>